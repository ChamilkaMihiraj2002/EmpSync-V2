// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String       @id
  name       String       @unique
  role       String
  dob        String?
  telephone  String?
  gender     String?
  address    String?
  email      String       @unique
  password   String
  salary     Int?
  thumbId    Bytes?       @unique
  supId      String?
  language   String?
  height     Int?
  weight     Int?
  payrolls   Payroll[]
  attendance Attendance[]
  createdAt  DateTime     @default(now())
}

model Ingredient {
  id             String   @id @unique
  name           String
  price_per_unit Decimal  @db.Decimal(10, 2)
  quantity       Decimal  @db.Decimal(10, 2)
  priority       Int
  createdAt      DateTime @default(now())
}

model Payroll {
  id         String   @id @unique
  empId      String
  employee   User     @relation(fields: [empId], references: [id])
  month      String
  payrollPdf Bytes
  createdAt  DateTime @default(now())
}

model Meal {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Float
  category    String
  imageUrl    String?
  createdAt   DateTime @default(now())
}

model SalaryAdjustments {
  id           Int     @id @default(autoincrement())
  label        String
  isPercentage Boolean //Percentage or Value
  allowance    Boolean //Allowance or Deduction
  amount Float?
}

model Order {
  id          Int      @id @default(autoincrement())
  orderNumber String   @unique
  orderDate   DateTime @default(now())
  price       Float
  employeeId  String
  serve       Boolean  @default(false)
}

model Attendance {
  id       String   @id
  empId    String
  employee User     @relation(fields: [empId], references: [id])
  dateTime DateTime
  status   String
}

model LeaveApplication {
  id          Int      @id @default(autoincrement())
  appliedDate DateTime @default(now())
  duration    Float
  empId       String
  reason      String
  status      Boolean  @default(false)
  reviewedBy  String
}

model ScheduledMeal {
  id        Int      @id @default(autoincrement())
  date      DateTime @unique @db.Date // Store as DATE (without time)
  breakfast String[]
  lunch     String[]
  dinner    String[]
  createdAt DateTime @default(now())
}
